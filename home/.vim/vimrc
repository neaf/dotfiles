"""""""""""""""""""""""
"  pielgrzym's vimrc  "
"""""""""""""""""""""""

" General initialization ----------------------- {{{
set nocompatible "Turns off vi compatibility - adds cool functionality
filetype off
" }}}
" Neobundle setup ---------------------------{{{
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif
" Setting up Vundle - the vim plugin bundler
" Credit: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
let iCanHazVundle=1
let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(neobundle_readme)
    echo "Installing neobundle.vim."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    let iCanHazVundle=0
endif

if has('vim_starting')
        set nocompatible               " Be iMproved

        " Required:
        set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
"Eof Neobundle setup}}}
" Neobundle bundles ---------------------------{{{
NeoBundle "sjl/gundo.vim.git"
NeoBundle "tpope/vim-surround.git"
NeoBundle "tpope/vim-fugitive.git"
NeoBundle "tpope/vim-repeat.git"
NeoBundle "Shougo/neocomplcache.git"
NeoBundle "vim-scripts/matchit.zip.git"
NeoBundle "majutsushi/tagbar.git"
NeoBundle "vim-scripts/L9.git"
NeoBundle "gregsexton/gitv.git"
NeoBundle "mattn/emmet-vim.git"
NeoBundle "blueyed/vim-autoclose.git"
NeoBundle "tomtom/tcomment_vim.git"
NeoBundle "mattn/gist-vim.git"
NeoBundle "pielgrzym/vim-colors-solarized.git"
NeoBundle "kien/ctrlp.vim.git"
NeoBundle "vim-scripts/rubycomplete.vim.git"
NeoBundle "tpope/vim-rails.git"
NeoBundle "michaeljsmith/vim-indent-object.git"
NeoBundle "SirVer/ultisnips.git"
NeoBundle 'honza/vim-snippets'
NeoBundle "mattn/webapi-vim.git"
NeoBundle "tmatilai/gitolite.vim.git"
NeoBundle "pangloss/vim-javascript.git"
NeoBundle "pielgrzym/ctrlp-sessions.git"
NeoBundle "endel/ctrlp-filetype.vim.git"
NeoBundle "evanmiller/nginx-vim-syntax.git"
NeoBundle "bling/vim-airline.git"
NeoBundle "tjennings/git-grep-vim.git"
NeoBundle "kchmck/vim-coffee-script.git"
NeoBundle "tomtom/tlib_vim.git"
NeoBundle "tomtom/trag_vim.git"
NeoBundle "nono/vim-handlebars.git"
NeoBundle "vim-scripts/TVO--The-Vim-Outliner.git"
NeoBundle "rking/ag.vim.git"
NeoBundle "edkolev/tmuxline.vim.git"
NeoBundle "tpope/vim-unimpaired.git", { 'rev': 'a3492ee2058a2ef62e883f909bf50bc135077748' }
NeoBundle "mustache/vim-mustache-handlebars.git"
NeoBundle "chase/vim-ansible-yaml", {'rev': '6c554c78d831e88376ce5ca5d9664c87ffaba6ab'}
NeoBundle "vim-scripts/YankRing.vim"
NeoBundle "tpope/vim-vinegar"

call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
set t_Co=256 " without this line tmux/screen will do *bad* things to colors, dude
"Eof Neobundle neobundles}}}
" Solarized settings --------------------------- {{{
function! SolLight() " {{{
        set background=light
        colorscheme solarized
endfunction " }}}
function! SolDark() "{{{
        set background=dark
        colorscheme solarized
endfunction " }}}
set background=dark
colorscheme solarized
if has('gui_running')
        call togglebg#map("<F1>")
else
        noremap <F1> :call SolLight()<CR>
        noremap <F2> :call SolDark()<CR>
endif
" }}}
" Various options ------------------------------ {{{
let python_highlight_all = 1
set fencs=utf-8,iso-8859-2,cp1250 "Resolve encoding problems
set autoread "Set to auto read when a file is changed from the outside
set hidden "Enables changing buffer without saving
set history=2000 "Sets how many lines of history VIM has to remember
set ssop=blank,buffers,curdir,folds,localoptions,tabpages,winpos,winsize "Session options
set viminfo='500,<1000,s100,f1,n~/.viminfo "Remember marks, registers (up to 100kb)
set ignorecase " case insensitive search
set incsearch " incremental search FTW
set smartcase " make searches case-insensitive, unless they contain upper-case letters:
set scrolljump=7
set pastetoggle=<F12>
set modelines=1
set cursorline " cool cursor
set backspace=indent,eol,start " backspacing over all sorts of stuff
filetype plugin on "Enable filetype plugin
filetype indent on "Enable indenting plugin
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv
" same when jumping to changes!
nnoremap g; g;zz
nnoremap g, g,zz
" }}}
" Nowrap goodies ------------------------------- {{{
set nowrap
set sidescroll=5 "when moving in the file horizontally move 5 columns a time
set listchars+=precedes:←,extends:→ " nice indicators that there is more text horizontally
" }}}
" Backup options ------------------------------- {{{
set backup "Enable creation of backup files
set backupdir=~/.vbk "Place backup files in a hidden dir
"set directory=~/.vbk "Place swap files in a hidden dir
set undofile "persisent undo! new in vim 7.3!
set noswapfile
set undodir=~/.vimundo
" }}}
" User interface and text formatting ----------- {{{
set number "Show line numbers
set wildmenu "Turn on WiLd menu
" wildignore taken from Steve Losh's config:
set wildignore+=.hg,.git,.svn " Version control
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg " binary images
set wildignore+=*.luac " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc " Python byte code
set wildignore+=*.sw? " Vim swap files
set shortmess=atI "Remove greeting msg and 'press a key' msgs
set laststatus=2 "Statusline always visible
set statusline=[%n]\ %f%-m%-r%-h%-w\ [%Y]\ [%l/%L\]\ %{fugitive#statusline()}\ [%p%%] "Better statusline format
"get rid of gvim toolbars and stuff
set guioptions=
set guifont=Meslo\ LG\ S\ for\ Powerline\ 8
if has("gui_macvim")
        set guifont=Terminus\ Medium\ for\ Powerline:h14
endif
" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="
" text formatting
set expandtab "Use spaces to create tabs
set ai "Auto indent
set si "Smart indet
syntax on "Enable syntax highligting

fun! StripTrailingWhitespaces()
	let l = line(".")
	let c = col(".")
	let _s=@/
	%s/\s\+$//e
	let @/=_s
	nohl
	call cursor(l, c)
endfun

autocmd BufWritePre * :call StripTrailingWhitespaces()
set nofoldenable
" }}}
" Autocompletion ------------------------------- {{{
set completeopt=longest,menuone,preview
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
" }}}
" Global Keymappings --------------------------- {{{
" Leader key under '\' is totally inconvenient, remapping to ','
let mapleader = "\<Space>"
let maplocalleader = ","
" Save on double ESC
map <Esc><Esc> :w<CR>
imap <Esc><Esc> <Esc>:w<CR>
nmap <leader><leader> <C-^>
nnoremap <silent> <Leader>w :set nowrap!<CR>
nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>
nmap <silent> <C-l> :wincmd l<CR>
" cmap in case we've forgotten to sudo vim before editing file ;)
cmap `w w !sudo tee >/dev/null %
" Hard to type
imap hh =>
nmap <leader>y "*y
nmap <leader>p "*p
vmap <leader>y "*y
vmap <leader>p "*p
" }}}
" Gundo ---------------------------------------- {{{
nnoremap <leader>u :GundoToggle<CR>
" }}}
" Tagbar --------------------------------------- {{{
nnoremap <silent> <Leader>l :TagbarOpenAutoClose<CR>
let g:tagbar_left = 1
let g:tagbar_compact = 1
" }}}
" CtrlP ---------------------------------------- {{{
nnoremap <silent> <Leader>f :CtrlPBuffer<CR>
nnoremap <silent> <Leader>F :CtrlPFiletype<CR>
" show pylint window. PURRRRRFECT!!!
nnoremap <silent> <Leader>e :CtrlPQuickfix<CR>
" jump between changes in buffer:
nnoremap <silent> <Leader>c :CtrlPChange<CR>
nnoremap <silent> <Leader>o :CtrlP<CR>
" nnoremap <silent> <Leader>d :CtrlPTag<CR>
nnoremap <silent> <Leader>t :CtrlPBufTag<CR>
nnoremap <silent> <Leader>T :CtrlPBufTagAll<CR>
nnoremap <silent> <Leader>` :CtrlPSessions<CR>
let g:ctrlp_cmd = 'CtrlPMRU' " show all mru by default
let g:ctrlp_mruf_relative = 1 " only mru from current workdir
let g:ctrlp_working_path_mode = 'r' " set path to nearest parent containing .git
" let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files'] " use git to search for files
let g:ctrlp_switch_buffer = 0 " allows to open one buffer more than once
let g:ctrlp_mruf_exclude = 'media/tinymce/.*\|static/tinymce/.*' " ignore those parts of django proj
let g:ctrlp_follow_symlinks = 1 " prooves quite usefull
let g:ctrlp_extensions = ['sessions', 'filetype', 'tags', 'line']
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0
if getcwd() == $HOME."/.homesick/repos/dotfiles"
        let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g "" --ignore .git'
endif
" }}}
" Neocomplcache -------------------------------- {{{
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1 " c_p -> compeltion -> current_page
inoremap <expr><C-x> neocomplcache#smart_close_popup()."\<C-x>"
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" }}}
" Ultisnips ------------------------------------ {{{
" let g:UltiSnipsExpandTrigger="<C-l>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
" }}}
" Bash/zsh/etc --------------------------------- {{{
augroup ft_bash
        autocmd!
        autocmd FileType bash,sh,zsh set ai sw=4 sts=4 et
augroup END
" }}}
" Ruby ----------------------------------------- {{{
augroup ft_ruby
        autocmd!
        autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et
        autocmd FileType ruby,eruby,yaml nmap <buffer> <leader>rci :%!ruby-code-indenter<cr>
augroup END
" }}}
" Vagrant --------------------------------------- {{{
augroup ft_vagrant
        autocmd!
        autocmd BufRead Vagrantfile set ft=ruby
augroup END
" }}}
" Nginx ----------------------------------------- {{{
function! NginxFt()
        autocmd BufRead *.conf set filetype=nginx
endfunction
augroup ft_nginx
        autocmd!
        autocmd BufRead nginx.conf set ft=nginx
        call NginxFt()
augroup END
" }}}
" Gist ----------------------------------------- {{{
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
if has("unix")
  let s:uname = system("uname -s")
  if s:uname == "Darwin"
    " Mac stuff here
    let g:gist_browser_command = 'open %URL%'
    let g:gist_clip_command = 'pbcopy'
  else
    let g:gist_browser_command = 'chromium %URL%'
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
endif
" }}}
" Templates ------------------------------------ {{{
autocmd BufNewFile * silent! 0r ~/.vim/templates/%:e.tpl
" }}}
" XML ------------------------------------------ {{{
augroup ft_xml
        autocmd!
        autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
        autocmd FileType xml  let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '`': '`', '«': '»'}
augroup END
" }}}
" Handlebars ----------------------------------- {{{
augroup ft_handlebars
        autocmd!
        autocmd FileType handlebars set ai sw=2 sts=2 et
augroup END
" }}}
" Html ----------------------------------------- {{{
augroup ft_html
        autocmd!
        autocmd FileType xhtml,html,html4 set ai sw=2 sts=2 et
        autocmd FileType htmldjango set commentstring={#\ %s\ #}
augroup END
" }}}
" Css ------------------------------------------ {{{
augroup ft_css
       autocmd!
       au BufNewFile,BufRead *.less,*.css setlocal foldmethod=marker
       au BufNewFile,BufRead *.less,*.css setlocal foldmarker={,}
       au BufNewFile,BufRead *.less,*.css nnoremap <buffer> <leader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>
augroup END
" }}}
" Vimscript file settings ---------------------- {{{
augroup filetype_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
" }}}
" Coffee ------------------------------------------ {{{
augroup ft_coffee
        autocmd!
        autocmd FileType coffee set ai sw=2 sts=2 et
augroup END
" }}}
" Airline -------------------------------------- {{{
let g:airline_powerline_fonts = 1
let g:airline_theme='murmur'
let g:airline_detect_whitespace=0
" let g:airline#extensions#tabline#enabled = 1
let g:airline_mode_map = {'R': 'R', 'c': 'CMD   ', 'V': 'VL', 'v': 'V', 'i': 'I', '^V': 'VB', 'n': 'N'}
" }}}
" Tmuxline -------------------------------------- {{{
let g:tmuxline_preset = {
        \ 'a': '#S',
        \ 'b': '#F',
        \ 'win': ['#I', '#W'],
        \ 'cwin': ['#I', '#W'],
        \ 'x': '#(tmux-loadavg)',
        \ 'y': ['%a %b %d ', '%R'],
        \ 'z': '#h',
        \'options' : {'status-justify' : 'left'}}
" }}}
